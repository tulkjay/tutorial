Chapter 13 - Views
Select results stored as object, considered a virtual table.
Reusable
Cuts down building execution plan
Con: Can be wasteful if view is too broad for use case.
Views can be used to remove sensitive columns/rows from tables
Can hide the complexity of some queries

CREATE VIEW name
[WITH {ENCRYPTION|SCHEMABINDING}]   
AS select_statement
[WITH CHECK OPTION]

Check options will secure rows(ie can't insert/update row to data outside of check option)
Schemabinding will check for changes to referred tables.
ENCRYPTION will prevent editing after creation

Updatable views:
No distinct/top, no aggregates, no calculated values, no grouping or having, no union.
Only one table can be updated
Useful for restricted access

If view is not updatable, it is a read-only view

Modifying a view
DROP VIEW view_name
ALTER VIEW same as view creation syntax.

Inserts can only be done on a single table.

*** Functions do not use Indices!
Use line comparisons that do not modify columns instead.
When inspecting execution plan, prefer index seek instead of index scan

Chapter 14 Scripts
Usually used for running multiple scripts together.
Use GO to separate batches
USE - changes database context
DECLARE variable_name type
PRINT value
SET variable_name = expression or value,
EXEC

Flow controls
IF, ELSE
BEGIN, END
WHILE
BREAK
CONTINUE
TRY, CATCH
GOTO
RETURN - Exits unconditionally

Variables: prefix with @, can use comma separated values

@@variable_name makes a global variable

Table Variables
DECLARE @table_name TABLE (column_name1 type [attributes], etc, table_attributes)
Can be treated like a normal table

Temporary table
Select ...
INTO #table_name
FROM ...

Then the temporary table may be used like a normal table.
Temporary tables may also be created using the CREATE TABLE syntax.

Table variable is stored in memory,
temporary tables stored on disk

Best to limit table variables to ~10000 rows, depending on data type.

Flow controls
IF bool_exp
    {statement|BEGIN...END}
[ELSE
    {statement|BEGIN...END}]

can be nested

IF EXISTS object_name
IE: DROP DATABASE IF EXISTS TestDb.
Different ways:
IF DB_ID('TestDb') IS NOT NULL
    DROP DATABASE TestDb
OR for tables, use object_id

WHILE expression
    {statement|BEGIN...END}
    [BREAK]
    [CONTINUE]

Cursors
Usually slower than using set operations
Declare a cursor name for select statement.
open cursor
Cursor can be made read-only or modifiable(cursor will place locks on items if not read-only).

You loop through cursor fetch values to work row by row.
when done, you close and deallocate cursor.

FETCH NEXT FROM cursor_name INTO @temp_variables
WHILE @@FETCH_STATUS <> -1
    BEGIN
        DOING STUFF
        FETCH NEXT FROM cursor name into @temp variables
    END;

Usually don't use cursors unless needed.

BEGIN TRY
    {sql_statement|statement_block}
END TRY
BEGIN CATCH
    {sql_statement|statement_block}
END CATCH

You can access ERROR_[number, message, severity, state] functions inside catch catch block.
Severities 10 and under or 20 and over are not handled

@@IDENTITY returns last id generated
IDENT_CURRENT('table_name') returns last id generated for specified table.

Usually SCOPE_IDENTITY() that returns latest generated in current scope.
You can use HOST_NAME() or SYSTEM_USER to get current workstation and current user.

Session settings can be changed
SET setting_name value
date format, 
ansi_nulls(to use column = null syntax), 
ansi_padding, 
ROWCOUNT(to set top(n) for session)
Useful is SET NOCOUNT {ON|OFF}

EXEC aka EXECUTE - Used to create dynamic sql
Runs a sql string
IE: Make a table where column names are results of query :O

Dynamic sql string and user input can create sql injection.

Chapter 15 - Stored Procedures, Functions, Triggers
SPs, Functions, and triggers only have one batch.
SPs and functions take parameters.

CREATE PROCEDURE spName --Or PROC
AS

Does not have to return a result set.
Includes input and output parameters.
Fired off with EXEC spName.
Execution plan might be modified as the sproc gets used.
Like views, sprocs can be created with ENCRYPTION, so that the sproc cannot be modified.
EXECUTE_AS_clause will recompile each time.
Parameter list follows name

IE: 
CREATE PROC spTest
    @DateVar smalldatetime = NULL,
    @InvTotal money OUTPUT
AS 
SELECT @InvTotal = SUM(...)
FROM ...
WHERE ... > @DateVar

= NULL is a default parameter option, runtime error will occur is no default is given.
Or put If @asdf Is null
    select @asdf = default option.
...
Ordinarily, optional parameters are listed last, so that naming the input variables is not required.
Stored procedures RETURN value statement only returns integer values.

THROW [error_number, message, state]
Severity of user exception is always 16
State code is for the user to define, and can be any value from 0-255
You can pass a table as an input parameter
In order to pass table, readonly flag must be placed on parameter.
You also have to create a new table type with table definition.
Created table cannot have foreign keys.

ALTER and DROP PROC are used to modify/delete procedures.

User defined functions
Can return scalar value or table based on single or multiple tables.
Need to specify schema it is involved with(usually dbo).
You can join to a function.

Scalar value function:
CREATE FUNCTION schema_name.function_name
([@parameter_name data_type [= default]])
RETURNS money
AS
BEGIN
RETURN scalar_expression
END

for table return:
CREATE FUNCTION schema_name.function_name
([@parameter_name data_type [= default]])
RETURNS TABLE
[AS]
RETURN [select_statement]

Defining a multi-statement table-valued function
You need to define the structure of the return table.
DROP and ALTER are used to manipulate functions

Triggers
Associated with tables, views, or database itself that execute in response to action occurring.
Can be set up with encryption and EXECUTE_AS_clause

IE:
CREATE TRIGGER Vendors_INSERT_UPDATE
    ON Vendors
    AFTER INSERT, UPDATE
AS
    UPDATE Vendors
    SET VendorState = UPPER(VendorState)
    WHERE VendorId IN (SELECT VendorID FROM Inserted);
Inserted and Deleted are temporary tables during scope of trigger.

Name triggers in a descriptive way

INSTEAD OF Trigger

Chapter 16 Transactions and Locking
Transactions
Use transactions when the failure of any of the statements would violate data integrity.

BEGIN, COMMIT, ROLLBACK

SAVE creates a checkpoint/save_point.
Transactions can be marked with a name, and can be nested.
Transactions are stacked until COMMIT is called enough to set stack to 0.
@@TRANCOUNT


BEGIN TRAN;
    ...
    SAVE TRAN Vendor1;
        ...
        SAVE TRAN Vendor2;
            ...
        ROLLBACK TRAN Vendor2;
        ...
    ROLLBACK TRAN Vendor1;
    ...
COMMIT TRAN

Transactions are handled in the order that they are received. If there are changes executing at the same time, concurrency can be an issue
Dirty Reads
Lost Updates
Nonrepeatable reads(inconsistent analysis)
Phantom reads

Isolation levels - least to most
READ UNCOMMITTED
READ COMMITTED - default
Repeatable read
snapshot - does not place locks, but saves versions of rows in a tempDb
serializable

SET TRANSACTION ISOLATION LEVEL {level_Name}

SQL Server and locking
small -> large
row -> key -> page -> extent -> Heap/B-tree -> table -> file -> metadata -> allocation unit -> database

You want to balance locking too wide and locking too deep
Locking is controlled by lock manager.

Lock modes
shared
Exclusive

Deadlocks

Tips for avoiding deadlocks
Keep transactions short, move selects to outside transactions, do not request user input for open transaction
**** Page 525

Chapter 18 XML
You can store uncommon variables in an XML column, the issue being that it takes time to pull value out.
inserts/updates will check value against type attribute

CREATE TABLE Log
(EventID int NOT NULL IDENTITY PRIMARY KEY,
EventData xml NOT NULL)

Create trigger Db_CrateTable_DropTable
    on database
    after create_table, drop_table
AS
    Declare @EventData xml;
    Select @EventData = EVENTDATA();
    Insert Into Log values(@EventData);

Without schema definition attached, string values do not have to be xml values(it is not enforced).

If working with XML fragment, XML tab appears in SSMS, it can create a schema definition.

XML functions: 
IE: EventData.query|exist|value|modify|nodes
query gets element with children and attributes
exist returns 1 if true
value: pull item out.
usually, modify is not used, usually entire fragment is replaced.

XQuery: 
    starts with /
    / is the separator
    [] specifies an attribute

CREATE XML SCHEMA COLLECTION name
AS
`
    <xs:schema ...>
    ...
    </xs:schema>
`;

This schema can be used when defining an xml column for a table.

DROP XML SCHEMA COLLECTION name

Append FOR XML with keywords like RAW/AUTO, ROOT('VendorInvoices'), ELEMENTS

To show xml in a tabular result set, use OPENXML

Requires making a pointer to point to internal xml document.

use built in stored procedures:
sp_Xml_PrepareDocument(pointer_int OUTPUT, xml fragment or definition)
sp_Xml_RemoveDocument pointer_int

